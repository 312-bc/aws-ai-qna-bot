Index: Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Makefile	(revision e8cb36c21b1ee19a5a50ac34eb60c1f217c41108)
+++ Makefile	(date 1566227487568)
@@ -31,7 +31,7 @@
 	cp docs/blog-samples.json build/documents
 
 upload: templates lambda website build assets
-	./bin/upload.sh
+	bash ./bin/upload.sh
 
 test: build 
 	$(MAKE) -C test
Index: lambda/fulfillment/lib/middleware/4_hook.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lambda/fulfillment/lib/middleware/4_hook.js	(revision e8cb36c21b1ee19a5a50ac34eb60c1f217c41108)
+++ lambda/fulfillment/lib/middleware/4_hook.js	(date 1566239796673)
@@ -1,15 +1,27 @@
-var _=require('lodash')
-var util=require('./util')
+var _ = require('lodash')
+var util = require('./util')
 
-module.exports=async function hook(req,res){
-    var arn=util.getLambdaArn(_.get(res.result,"l",""))
-    
-    if(arn){
-        return await util.invokeLambda({
-            FunctionName:arn,
-            req,res
-        })
-    }else{
-        return {req,res}
+module.exports.hook = async (req, res) => {
+    const arn = util.getLambdaArn(_.get(res.result, "l", ""));
+    if (arn) {
+        const event = await util.invokeLambda({
+            FunctionName: arn,
+            req, res
+        });
+        // make sure previous values in the response object are updated with values the lambda hook may set
+        if (event && event.res && event.res.message && event.res.message.length > 0) {
+            event.res.session.previous.a = event.res.message;
+        }
+        if (event && event.res && event.res.session &&  event.res.session.appContext && event.res.session.appContext.altMessages
+                && event.res.session.appContext.altMessages.markdown) {
+            event.res.session.previous.alt.markdown = event.res.session.appContext.altMessages.markdown;
+        }
+        if (event && event.res && event.res.session &&  event.res.session.appContext && event.res.session.appContext.altMessages
+            && event.res.session.appContext.altMessages.ssml) {
+            event.res.session.previous.alt.ssml = event.res.session.appContext.altMessages.ssml;
+        }
+        return event;
+    } else {
+        return {req, res}
     }
-}
+};
